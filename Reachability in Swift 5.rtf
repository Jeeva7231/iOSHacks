{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red155\green35\blue147;\red255\green255\blue255;\red0\green0\blue0;
\red11\green79\blue121;\red57\green0\blue160;\red15\green104\blue160;\red196\green26\blue22;\red28\green70\blue74;
\red50\green109\blue116;\red93\green108\blue121;\red93\green108\blue121;\red93\green108\blue121;\red47\green54\blue61;
\red108\green54\blue169;\red100\green56\blue32;\red74\green85\blue96;\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c10981\c27276\c28869;
\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c36526\c42188\c47515\c35000;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c36526\c42188\c47515\c50000;\csgenericrgb\c18263\c21094\c23758\c92500;
\csgenericrgb\c42190\c21278\c66379;\csgenericrgb\c39147\c22031\c12446;\csgenericrgb\c29020\c33333\c37647;\csgenericrgb\c11000\c0\c81000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21860\viewh13920\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Reachability.swift \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1\b \cf2 \cb3 import
\f2\b0 \cf4  SystemConfiguration\

\f1\b \cf2 import
\f2\b0 \cf4  Foundation\
\

\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 enum
\f2\b0 \cf4  \cf5 ReachabilityError\cf4 : \cf6 Error\cf4  \{\
    
\f1\b \cf2 case
\f2\b0 \cf4  \cf7 failedToCreateWithAddress\cf4 (\cf6 sockaddr\cf4 , \cf6 Int32\cf4 )\
    
\f1\b \cf2 case
\f2\b0 \cf4  \cf7 failedToCreateWithHostname\cf4 (\cf6 String\cf4 , \cf6 Int32\cf4 )\
    
\f1\b \cf2 case
\f2\b0 \cf4  \cf7 unableToSetCallback\cf4 (\cf6 Int32\cf4 )\
    
\f1\b \cf2 case
\f2\b0 \cf4  \cf7 unableToSetDispatchQueue\cf4 (\cf6 Int32\cf4 )\
    
\f1\b \cf2 case
\f2\b0 \cf4  \cf7 unableToGetFlags\cf4 (\cf6 Int32\cf4 )\
\}\
\

\f1\b \cf2 @available
\f2\b0 \cf4 (*, unavailable, renamed: \cf8 "Notification.Name.reachabilityChanged"\cf4 )\

\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 let
\f2\b0 \cf4  \cf7 ReachabilityChangedNotification\cf4  = \cf6 NSNotification\cf4 .\cf6 Name\cf4 (\cf8 "ReachabilityChangedNotification"\cf4 )\
\

\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 extension
\f2\b0 \cf4  \cf6 Notification\cf4 .\cf6 Name\cf4  \{\
    
\f1\b \cf2 static
\f2\b0 \cf4  
\f1\b \cf2 let
\f2\b0 \cf4  \cf7 reachabilityChanged\cf4  = \cf6 Notification\cf4 .\cf6 Name\cf4 (\cf8 "reachabilityChanged"\cf4 )\
\}\
\

\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 class
\f2\b0 \cf4  \cf5 Reachability\cf4  \{\
\
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 typealias
\f2\b0 \cf4  \cf5 NetworkReachable\cf4  = (\cf9 Reachability\cf4 ) -> ()\
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 typealias
\f2\b0 \cf4  \cf5 NetworkUnreachable\cf4  = (\cf9 Reachability\cf4 ) -> ()\
\
    
\f1\b \cf2 @available
\f2\b0 \cf4 (*, unavailable, renamed: \cf8 "Connection"\cf4 )\
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 enum
\f2\b0 \cf4  \cf5 NetworkStatus\cf4 : \cf6 CustomStringConvertible\cf4  \{\
        
\f1\b \cf2 case
\f2\b0 \cf4  \cf7 notReachable\cf4 , \cf7 reachableViaWiFi\cf4 , \cf7 reachableViaWWAN\cf4 \
        
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 description\cf4 : \cf6 String\cf4  \{\
            
\f1\b \cf2 switch
\f2\b0 \cf4  
\f1\b \cf2 self
\f2\b0 \cf4  \{\
            
\f1\b \cf2 case
\f2\b0 \cf4  .\cf10 reachableViaWWAN\cf4 : 
\f1\b \cf2 return
\f2\b0 \cf4  \cf8 "Cellular"\cf4 \
            
\f1\b \cf2 case
\f2\b0 \cf4  .\cf10 reachableViaWiFi\cf4 : 
\f1\b \cf2 return
\f2\b0 \cf4  \cf8 "WiFi"\cf4 \
            
\f1\b \cf2 case
\f2\b0 \cf4  .\cf10 notReachable\cf4 : 
\f1\b \cf2 return
\f2\b0 \cf4  \cf8 "No Connection"\cf4 \
            \}\
        \}\
    \}\
\
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 enum
\f2\b0 \cf4  \cf5 Connection\cf4 : \cf6 CustomStringConvertible\cf4  \{\
        
\f1\b \cf2 case
\f2\b0 \cf4  \cf7 unavailable\cf4 , \cf7 wifi\cf4 , \cf7 cellular\cf4 \
        
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 description\cf4 : \cf6 String\cf4  \{\
            
\f1\b \cf2 switch
\f2\b0 \cf4  
\f1\b \cf2 self
\f2\b0 \cf4  \{\
            
\f1\b \cf2 case
\f2\b0 \cf4  .\cf10 cellular\cf4 : 
\f1\b \cf2 return
\f2\b0 \cf4  \cf8 "Cellular"\cf4 \
            
\f1\b \cf2 case
\f2\b0 \cf4  .\cf10 wifi\cf4 : 
\f1\b \cf2 return
\f2\b0 \cf4  \cf8 "WiFi"\cf4 \
            
\f1\b \cf2 case
\f2\b0 \cf4  .\cf10 unavailable\cf4 : 
\f1\b \cf2 return
\f2\b0 \cf4  \cf8 "No Connection"\cf4 \
            \}\
        \}\
        \
        
\f1\b \cf2 @available
\f2\b0 \cf4 (*, deprecated, renamed: \cf8 "unavailable"\cf4 )\
        
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 static
\f2\b0 \cf4  
\f1\b \cf2 let
\f2\b0 \cf4  \cf7 none\cf4 : \cf9 Connection\cf4  = .\cf10 unavailable\cf4 \
    \}\
\
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 whenReachable\cf4 : \cf9 NetworkReachable\cf4 ?\
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 whenUnreachable\cf4 : \cf9 NetworkUnreachable\cf4 ?\
\
    
\f1\b \cf2 @available
\f2\b0 \cf4 (*, deprecated, renamed: \cf8 "allowsCellularConnection"\cf4 )\
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 let
\f2\b0 \cf4  \cf7 reachableOnWWAN\cf4 : \cf6 Bool\cf4  = 
\f1\b \cf2 true
\f2\b0 \cf4 \
\
    \cf11 ///\cf4  
\f3 \cf12 Set to 
\f2 \cf13 `\cf14 false\cf13 `
\f3 \cf12  to force Reachability.connection to .none when on cellular connection (default value 
\f2 \cf13 `\cf14 true\cf13 `
\f3 \cf12 )
\f2 \cf4 \
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 allowsCellularConnection\cf4 : \cf6 Bool\cf4 \
\
    \cf12 // The notification center on which "reachability changed" events are being posted\cf4 \
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 notificationCenter\cf4 : \cf6 NotificationCenter\cf4  = \cf6 NotificationCenter\cf4 .\cf15 default\cf4 \
\
    
\f1\b \cf2 @available
\f2\b0 \cf4 (*, deprecated, renamed: \cf8 "connection.description"\cf4 )\
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 currentReachabilityString\cf4 : \cf6 String\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf8 "\cf4 \\(\cf10 connection\cf4 )\cf8 "\cf4 \
    \}\
\
    
\f1\b \cf2 @available
\f2\b0 \cf4 (*, unavailable, renamed: \cf8 "connection"\cf4 )\
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 currentReachabilityStatus\cf4 : \cf9 Connection\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf10 connection\cf4 \
    \}\
\
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 connection\cf4 : \cf9 Connection\cf4  \{\
        
\f1\b \cf2 if
\f2\b0 \cf4  \cf10 flags\cf4  \cf15 ==\cf4  
\f1\b \cf2 nil
\f2\b0 \cf4  \{\
            
\f1\b \cf2 try
\f2\b0 \cf4 ? \cf10 setReachabilityFlags\cf4 ()\
        \}\
        \
        
\f1\b \cf2 switch
\f2\b0 \cf4  \cf10 flags\cf4 ?.\cf10 connection\cf4  \{\
        
\f1\b \cf2 case
\f2\b0 \cf4  .\cf10 unavailable\cf4 ?, 
\f1\b \cf2 nil
\f2\b0 \cf4 : 
\f1\b \cf2 return
\f2\b0 \cf4  .\cf10 unavailable\cf4 \
        
\f1\b \cf2 case
\f2\b0 \cf4  .\cf10 cellular\cf4 ?: 
\f1\b \cf2 return
\f2\b0 \cf4  \cf10 allowsCellularConnection\cf4  ? .\cf10 cellular\cf4  : .\cf10 unavailable\cf4 \
        
\f1\b \cf2 case
\f2\b0 \cf4  .\cf10 wifi\cf4 ?: 
\f1\b \cf2 return
\f2\b0 \cf4  .\cf10 wifi\cf4 \
        \}\
    \}\
\
    
\f1\b \cf2 fileprivate
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isRunningOnDevice\cf4 : \cf6 Bool\cf4  = \{\
        \cf16 #if\cf4  \cf16 targetEnvironment\cf4 (\cf16 simulator\cf4 )\
            
\f1\b \cf2 return
\f2\b0 \cf4  
\f1\b \cf2 false
\f2\b0 \cf4 \
        \cf16 #else\cf4 \
            
\f1\b \cf2 return
\f2\b0 \cf4  
\f1\b \cf2 true
\f2\b0 \cf4 \
        \cf16 #endif\cf4 \
    \}()\
\
    
\f1\b \cf2 fileprivate(set)
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 notifierRunning\cf4  = 
\f1\b \cf2 false
\f2\b0 \cf4 \
    
\f1\b \cf2 fileprivate
\f2\b0 \cf4  
\f1\b \cf2 let
\f2\b0 \cf4  \cf7 reachabilityRef\cf4 : \cf6 SCNetworkReachability\cf4 \
    
\f1\b \cf2 fileprivate
\f2\b0 \cf4  
\f1\b \cf2 let
\f2\b0 \cf4  \cf7 reachabilitySerialQueue\cf4 : \cf6 DispatchQueue\cf4 \
    
\f1\b \cf2 fileprivate
\f2\b0 \cf4  
\f1\b \cf2 let
\f2\b0 \cf4  \cf7 notificationQueue\cf4 : \cf6 DispatchQueue\cf4 ?\
    
\f1\b \cf2 fileprivate(set)
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 flags\cf4 : \cf6 SCNetworkReachabilityFlags\cf4 ? \{\
        
\f1\b \cf2 didSet
\f2\b0 \cf4  \{\
            
\f1\b \cf2 guard
\f2\b0 \cf4  \cf10 flags\cf4  \cf15 !=\cf4  oldValue 
\f1\b \cf2 else
\f2\b0 \cf4  \{ 
\f1\b \cf2 return
\f2\b0 \cf4  \}\
            \cf10 notifyReachabilityChanged\cf4 ()\
        \}\
    \}\
\
    
\f1\b \cf2 required
\f2\b0 \cf4  
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 init
\f2\b0 \cf4 (reachabilityRef: \cf6 SCNetworkReachability\cf4 ,\
                         queueQoS: \cf6 DispatchQoS\cf4  = .\cf15 default\cf4 ,\
                         targetQueue: \cf6 DispatchQueue\cf4 ? = 
\f1\b \cf2 nil
\f2\b0 \cf4 ,\
                         notificationQueue: \cf6 DispatchQueue\cf4 ? = .\cf15 main\cf4 ) \{\
        
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 allowsCellularConnection\cf4  = 
\f1\b \cf2 true
\f2\b0 \cf4 \
        
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 reachabilityRef\cf4  = reachabilityRef\
        
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 reachabilitySerialQueue\cf4  = \cf6 DispatchQueue\cf4 (label: \cf8 "uk.co.ashleymills.reachability"\cf4 , qos: queueQoS, target: targetQueue)\
        
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 notificationQueue\cf4  = notificationQueue\
    \}\
\
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 convenience
\f2\b0 \cf4  
\f1\b \cf2 init
\f2\b0 \cf4 (hostname: \cf6 String\cf4 ,\
                            queueQoS: \cf6 DispatchQoS\cf4  = .\cf15 default\cf4 ,\
                            targetQueue: \cf6 DispatchQueue\cf4 ? = 
\f1\b \cf2 nil
\f2\b0 \cf4 ,\
                            notificationQueue: \cf6 DispatchQueue\cf4 ? = .\cf15 main\cf4 ) 
\f1\b \cf2 throws
\f2\b0 \cf4  \{\
        
\f1\b \cf2 guard
\f2\b0 \cf4  
\f1\b \cf2 let
\f2\b0 \cf4  ref = \cf15 SCNetworkReachabilityCreateWithName\cf4 (
\f1\b \cf2 nil
\f2\b0 \cf4 , hostname) 
\f1\b \cf2 else
\f2\b0 \cf4  \{\
            
\f1\b \cf2 throw
\f2\b0 \cf4  \cf9 ReachabilityError\cf4 .\cf10 failedToCreateWithHostname\cf4 (hostname, \cf15 SCError\cf4 ())\
        \}\
        
\f1\b \cf2 self
\f2\b0 \cf4 .\cf9 init\cf4 (reachabilityRef: ref, queueQoS: queueQoS, targetQueue: targetQueue, notificationQueue: notificationQueue)\
    \}\
\
    
\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 convenience
\f2\b0 \cf4  
\f1\b \cf2 init
\f2\b0 \cf4 (queueQoS: \cf6 DispatchQoS\cf4  = .\cf15 default\cf4 ,\
                            targetQueue: \cf6 DispatchQueue\cf4 ? = 
\f1\b \cf2 nil
\f2\b0 \cf4 ,\
                            notificationQueue: \cf6 DispatchQueue\cf4 ? = .\cf15 main\cf4 ) 
\f1\b \cf2 throws
\f2\b0 \cf4  \{\
        
\f1\b \cf2 var
\f2\b0 \cf4  zeroAddress = \cf6 sockaddr\cf4 ()\
        zeroAddress.\cf15 sa_len\cf4  = \cf6 UInt8\cf4 (\cf6 MemoryLayout\cf4 <\cf6 sockaddr\cf4 >.\cf15 size\cf4 )\
        zeroAddress.\cf15 sa_family\cf4  = \cf6 sa_family_t\cf4 (\cf15 AF_INET\cf4 )\
\
        
\f1\b \cf2 guard
\f2\b0 \cf4  
\f1\b \cf2 let
\f2\b0 \cf4  ref = \cf15 SCNetworkReachabilityCreateWithAddress\cf4 (
\f1\b \cf2 nil
\f2\b0 \cf4 , &zeroAddress) 
\f1\b \cf2 else
\f2\b0 \cf4  \{\
            
\f1\b \cf2 throw
\f2\b0 \cf4  \cf9 ReachabilityError\cf4 .\cf10 failedToCreateWithAddress\cf4 (zeroAddress, \cf15 SCError\cf4 ())\
        \}\
\
        
\f1\b \cf2 self
\f2\b0 \cf4 .\cf9 init\cf4 (reachabilityRef: ref, queueQoS: queueQoS, targetQueue: targetQueue, notificationQueue: notificationQueue)\
    \}\
\
    
\f1\b \cf2 deinit
\f2\b0 \cf4  \{\
        \cf10 stopNotifier\cf4 ()\
    \}\
\}\
\

\f1\b \cf2 public
\f2\b0 \cf4  
\f1\b \cf2 extension
\f2\b0 \cf4  \cf9 Reachability\cf4  \{\
\
    \cf12 // MARK:
\f1\b \cf17  - *** Notifier methods ***
\f2\b0 \cf4 \
    
\f1\b \cf2 func
\f2\b0 \cf4  \cf7 startNotifier\cf4 () 
\f1\b \cf2 throws
\f2\b0 \cf4  \{\
        
\f1\b \cf2 guard
\f2\b0 \cf4  \cf15 !\cf10 notifierRunning\cf4  
\f1\b \cf2 else
\f2\b0 \cf4  \{ 
\f1\b \cf2 return
\f2\b0 \cf4  \}\
\
        
\f1\b \cf2 let
\f2\b0 \cf4  callback: \cf6 SCNetworkReachabilityCallBack\cf4  = \{ (reachability, flags, info) 
\f1\b \cf2 in
\f2\b0 \cf4 \
            
\f1\b \cf2 guard
\f2\b0 \cf4  
\f1\b \cf2 let
\f2\b0 \cf4  info = info 
\f1\b \cf2 else
\f2\b0 \cf4  \{ 
\f1\b \cf2 return
\f2\b0 \cf4  \}\
\
            \cf12 // `weakifiedReachability` is guaranteed to exist by virtue of our\cf4 \
            \cf12 // retain/release callbacks which we provided to the `SCNetworkReachabilityContext`.\cf4 \
            
\f1\b \cf2 let
\f2\b0 \cf4  weakifiedReachability = \cf6 Unmanaged\cf4 <\cf9 ReachabilityWeakifier\cf4 >.\cf15 fromOpaque\cf4 (info).\cf15 takeUnretainedValue\cf4 ()\
\
            \cf12 // The weak `reachability` _may_ no longer exist if the `Reachability`\cf4 \
            \cf12 // object has since been deallocated but a callback was already in flight.\cf4 \
            weakifiedReachability.\cf10 reachability\cf4 ?.\cf10 flags\cf4  = flags\
        \}\
\
        
\f1\b \cf2 let
\f2\b0 \cf4  weakifiedReachability = \cf9 ReachabilityWeakifier\cf4 (reachability: 
\f1\b \cf2 self
\f2\b0 \cf4 )\
        
\f1\b \cf2 let
\f2\b0 \cf4  opaqueWeakifiedReachability = \cf6 Unmanaged\cf4 <\cf9 ReachabilityWeakifier\cf4 >.\cf15 passUnretained\cf4 (weakifiedReachability).\cf15 toOpaque\cf4 ()\
\
        
\f1\b \cf2 var
\f2\b0 \cf4  context = \cf6 SCNetworkReachabilityContext\cf4 (\
            version: \cf18 0\cf4 ,\
            info: \cf6 UnsafeMutableRawPointer\cf4 (opaqueWeakifiedReachability),\
            retain: \{ (info: \cf6 UnsafeRawPointer\cf4 ) -> \cf6 UnsafeRawPointer\cf4  
\f1\b \cf2 in
\f2\b0 \cf4 \
                
\f1\b \cf2 let
\f2\b0 \cf4  unmanagedWeakifiedReachability = \cf6 Unmanaged\cf4 <\cf9 ReachabilityWeakifier\cf4 >.\cf15 fromOpaque\cf4 (info)\
                
\f1\b \cf2 _
\f2\b0 \cf4  = unmanagedWeakifiedReachability.\cf15 retain\cf4 ()\
                
\f1\b \cf2 return
\f2\b0 \cf4  \cf6 UnsafeRawPointer\cf4 (unmanagedWeakifiedReachability.\cf15 toOpaque\cf4 ())\
            \},\
            release: \{ (info: \cf6 UnsafeRawPointer\cf4 ) -> \cf6 Void\cf4  
\f1\b \cf2 in
\f2\b0 \cf4 \
                
\f1\b \cf2 let
\f2\b0 \cf4  unmanagedWeakifiedReachability = \cf6 Unmanaged\cf4 <\cf9 ReachabilityWeakifier\cf4 >.\cf15 fromOpaque\cf4 (info)\
                unmanagedWeakifiedReachability.\cf15 release\cf4 ()\
            \},\
            copyDescription: \{ (info: \cf6 UnsafeRawPointer\cf4 ) -> \cf6 Unmanaged\cf4 <\cf6 CFString\cf4 > 
\f1\b \cf2 in
\f2\b0 \cf4 \
                
\f1\b \cf2 let
\f2\b0 \cf4  unmanagedWeakifiedReachability = \cf6 Unmanaged\cf4 <\cf9 ReachabilityWeakifier\cf4 >.\cf15 fromOpaque\cf4 (info)\
                
\f1\b \cf2 let
\f2\b0 \cf4  weakifiedReachability = unmanagedWeakifiedReachability.\cf15 takeUnretainedValue\cf4 ()\
                
\f1\b \cf2 let
\f2\b0 \cf4  description = weakifiedReachability.\cf10 reachability\cf4 ?.\cf10 description\cf4  ?? \cf8 "nil"\cf4 \
                
\f1\b \cf2 return
\f2\b0 \cf4  \cf6 Unmanaged\cf4 .\cf15 passRetained\cf4 (description 
\f1\b \cf2 as
\f2\b0 \cf4  \cf6 CFString\cf4 )\
            \}\
        )\
\
        
\f1\b \cf2 if
\f2\b0 \cf4  \cf15 !SCNetworkReachabilitySetCallback\cf4 (\cf10 reachabilityRef\cf4 , callback, &context) \{\
            \cf10 stopNotifier\cf4 ()\
            
\f1\b \cf2 throw
\f2\b0 \cf4  \cf9 ReachabilityError\cf4 .\cf10 unableToSetCallback\cf4 (\cf15 SCError\cf4 ())\
        \}\
\
        
\f1\b \cf2 if
\f2\b0 \cf4  \cf15 !SCNetworkReachabilitySetDispatchQueue\cf4 (\cf10 reachabilityRef\cf4 , \cf10 reachabilitySerialQueue\cf4 ) \{\
            \cf10 stopNotifier\cf4 ()\
            
\f1\b \cf2 throw
\f2\b0 \cf4  \cf9 ReachabilityError\cf4 .\cf10 unableToSetDispatchQueue\cf4 (\cf15 SCError\cf4 ())\
        \}\
\
        \cf12 // Perform an initial check\cf4 \
        
\f1\b \cf2 try
\f2\b0 \cf4  \cf10 setReachabilityFlags\cf4 ()\
\
        \cf10 notifierRunning\cf4  = 
\f1\b \cf2 true
\f2\b0 \cf4 \
    \}\
\
    
\f1\b \cf2 func
\f2\b0 \cf4  \cf7 stopNotifier\cf4 () \{\
        
\f1\b \cf2 defer
\f2\b0 \cf4  \{ \cf10 notifierRunning\cf4  = 
\f1\b \cf2 false
\f2\b0 \cf4  \}\
\
        \cf15 SCNetworkReachabilitySetCallback\cf4 (\cf10 reachabilityRef\cf4 , 
\f1\b \cf2 nil
\f2\b0 \cf4 , 
\f1\b \cf2 nil
\f2\b0 \cf4 )\
        \cf15 SCNetworkReachabilitySetDispatchQueue\cf4 (\cf10 reachabilityRef\cf4 , 
\f1\b \cf2 nil
\f2\b0 \cf4 )\
    \}\
\
    \cf12 // MARK:
\f1\b \cf17  - *** Connection test methods ***
\f2\b0 \cf4 \
    
\f1\b \cf2 @available
\f2\b0 \cf4 (*, deprecated, message: \cf8 "Please use `connection != .none`"\cf4 )\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isReachable\cf4 : \cf6 Bool\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf10 connection\cf4  \cf15 !=\cf4  .\cf10 unavailable\cf4 \
    \}\
\
    
\f1\b \cf2 @available
\f2\b0 \cf4 (*, deprecated, message: \cf8 "Please use `connection == .cellular`"\cf4 )\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isReachableViaWWAN\cf4 : \cf6 Bool\cf4  \{\
        \cf12 // Check we're not on the simulator, we're REACHABLE and check we're on WWAN\cf4 \
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf10 connection\cf4  \cf10 ==\cf4  .\cf10 cellular\cf4 \
    \}\
\
   
\f1\b \cf2 @available
\f2\b0 \cf4 (*, deprecated, message: \cf8 "Please use `connection == .wifi`"\cf4 )\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isReachableViaWiFi\cf4 : \cf6 Bool\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf10 connection\cf4  \cf10 ==\cf4  .\cf10 wifi\cf4 \
    \}\
\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 description\cf4 : \cf6 String\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf10 flags\cf4 ?.\cf10 description\cf4  ?? \cf8 "unavailable flags"\cf4 \
    \}\
\}\
\

\f1\b \cf2 fileprivate
\f2\b0 \cf4  
\f1\b \cf2 extension
\f2\b0 \cf4  \cf9 Reachability\cf4  \{\
\
    
\f1\b \cf2 func
\f2\b0 \cf4  \cf7 setReachabilityFlags\cf4 () 
\f1\b \cf2 throws
\f2\b0 \cf4  \{\
        
\f1\b \cf2 try
\f2\b0 \cf4  \cf10 reachabilitySerialQueue\cf4 .\cf15 sync\cf4  \{ [
\f1\b \cf2 unowned
\f2\b0 \cf4  
\f1\b \cf2 self
\f2\b0 \cf4 ] 
\f1\b \cf2 in
\f2\b0 \cf4 \
            
\f1\b \cf2 var
\f2\b0 \cf4  flags = \cf6 SCNetworkReachabilityFlags\cf4 ()\
            
\f1\b \cf2 if
\f2\b0 \cf4  \cf15 !SCNetworkReachabilityGetFlags\cf4 (
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 reachabilityRef\cf4 , &flags) \{\
                
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 stopNotifier\cf4 ()\
                
\f1\b \cf2 throw
\f2\b0 \cf4  \cf9 ReachabilityError\cf4 .\cf10 unableToGetFlags\cf4 (\cf15 SCError\cf4 ())\
            \}\
            \
            
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 flags\cf4  = flags\
        \}\
    \}\
    \
\
    
\f1\b \cf2 func
\f2\b0 \cf4  \cf7 notifyReachabilityChanged\cf4 () \{\
        
\f1\b \cf2 let
\f2\b0 \cf4  notify = \{ [
\f1\b \cf2 weak
\f2\b0 \cf4  
\f1\b \cf2 self
\f2\b0 \cf4 ] 
\f1\b \cf2 in
\f2\b0 \cf4 \
            
\f1\b \cf2 guard
\f2\b0 \cf4  
\f1\b \cf2 let
\f2\b0 \cf4  
\f1\b \cf2 self
\f2\b0 \cf4  = 
\f1\b \cf2 self
\f2\b0 \cf4  
\f1\b \cf2 else
\f2\b0 \cf4  \{ 
\f1\b \cf2 return
\f2\b0 \cf4  \}\
            
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 connection\cf4  \cf15 !=\cf4  .\cf10 unavailable\cf4  ? 
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 whenReachable\cf4 ?(
\f1\b \cf2 self
\f2\b0 \cf4 ) : 
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 whenUnreachable\cf4 ?(
\f1\b \cf2 self
\f2\b0 \cf4 )\
            
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 notificationCenter\cf4 .\cf15 post\cf4 (name: .\cf10 reachabilityChanged\cf4 , object: 
\f1\b \cf2 self
\f2\b0 \cf4 )\
        \}\
\
        \cf12 // notify on the configured `notificationQueue`, or the caller's (i.e. `reachabilitySerialQueue`)\cf4 \
        \cf10 notificationQueue\cf4 ?.\cf15 async\cf4 (execute: notify) ?? notify()\
    \}\
\}\
\

\f1\b \cf2 extension
\f2\b0 \cf4  \cf6 SCNetworkReachabilityFlags\cf4  \{\
\
    
\f1\b \cf2 typealias
\f2\b0 \cf4  \cf5 Connection\cf4  = \cf9 Reachability\cf4 .\cf9 Connection\cf4 \
\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 connection\cf4 : \cf9 Connection\cf4  \{\
        
\f1\b \cf2 guard
\f2\b0 \cf4  \cf10 isReachableFlagSet\cf4  
\f1\b \cf2 else
\f2\b0 \cf4  \{ 
\f1\b \cf2 return
\f2\b0 \cf4  .\cf10 unavailable\cf4  \}\
\
        \cf12 // If we're reachable, but not on an iOS device (i.e. simulator), we must be on WiFi\cf4 \
        \cf16 #if\cf4  \cf16 targetEnvironment\cf4 (\cf16 simulator\cf4 )\
        
\f1\b \cf2 return
\f2\b0 \cf4  .\cf10 wifi\cf4 \
        \cf16 #else\cf4 \
        
\f1\b \cf2 var
\f2\b0 \cf4  connection = Connection.unavailable\
\
        
\f1\b \cf2 if
\f2\b0 \cf4  !isConnectionRequiredFlagSet \{\
            connection = .wifi\
        \}\
\
        
\f1\b \cf2 if
\f2\b0 \cf4  isConnectionOnTrafficOrDemandFlagSet \{\
            
\f1\b \cf2 if
\f2\b0 \cf4  !isInterventionRequiredFlagSet \{\
                connection = .wifi\
            \}\
        \}\
\
        
\f1\b \cf2 if
\f2\b0 \cf4  isOnWWANFlagSet \{\
            connection = .cellular\
        \}\
\
        
\f1\b \cf2 return
\f2\b0 \cf4  connection\
        \cf16 #endif\cf4 \
    \}\
\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isOnWWANFlagSet\cf4 : \cf6 Bool\cf4  \{\
        \cf16 #if\cf4  \cf16 os\cf4 (\cf16 iOS\cf4 )\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf15 contains\cf4 (.\cf15 isWWAN\cf4 )\
        \cf16 #else\cf4 \
        
\f1\b \cf2 return
\f2\b0 \cf4  
\f1\b \cf2 false
\f2\b0 \cf4 \
        \cf16 #endif\cf4 \
    \}\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isReachableFlagSet\cf4 : \cf6 Bool\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf15 contains\cf4 (.\cf15 reachable\cf4 )\
    \}\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isConnectionRequiredFlagSet\cf4 : \cf6 Bool\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf15 contains\cf4 (.\cf15 connectionRequired\cf4 )\
    \}\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isInterventionRequiredFlagSet\cf4 : \cf6 Bool\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf15 contains\cf4 (.\cf15 interventionRequired\cf4 )\
    \}\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isConnectionOnTrafficFlagSet\cf4 : \cf6 Bool\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf15 contains\cf4 (.\cf15 connectionOnTraffic\cf4 )\
    \}\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isConnectionOnDemandFlagSet\cf4 : \cf6 Bool\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf15 contains\cf4 (.\cf15 connectionOnDemand\cf4 )\
    \}\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isConnectionOnTrafficOrDemandFlagSet\cf4 : \cf6 Bool\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf15 !intersection\cf4 ([.\cf15 connectionOnTraffic\cf4 , .\cf15 connectionOnDemand\cf4 ]).\cf15 isEmpty\cf4 \
    \}\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isTransientConnectionFlagSet\cf4 : \cf6 Bool\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf15 contains\cf4 (.\cf15 transientConnection\cf4 )\
    \}\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isLocalAddressFlagSet\cf4 : \cf6 Bool\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf15 contains\cf4 (.\cf15 isLocalAddress\cf4 )\
    \}\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isDirectFlagSet\cf4 : \cf6 Bool\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf15 contains\cf4 (.\cf15 isDirect\cf4 )\
    \}\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 isConnectionRequiredAndTransientFlagSet\cf4 : \cf6 Bool\cf4  \{\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf15 intersection\cf4 ([.\cf15 connectionRequired\cf4 , .\cf15 transientConnection\cf4 ]) == [.\cf15 connectionRequired\cf4 , .\cf15 transientConnection\cf4 ]\
    \}\
\
    
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 description\cf4 : \cf6 String\cf4  \{\
        
\f1\b \cf2 let
\f2\b0 \cf4  W = \cf10 isOnWWANFlagSet\cf4  ? \cf8 "W"\cf4  : \cf8 "-"\cf4 \
        
\f1\b \cf2 let
\f2\b0 \cf4  R = \cf10 isReachableFlagSet\cf4  ? \cf8 "R"\cf4  : \cf8 "-"\cf4 \
        
\f1\b \cf2 let
\f2\b0 \cf4  c = \cf10 isConnectionRequiredFlagSet\cf4  ? \cf8 "c"\cf4  : \cf8 "-"\cf4 \
        
\f1\b \cf2 let
\f2\b0 \cf4  t = \cf10 isTransientConnectionFlagSet\cf4  ? \cf8 "t"\cf4  : \cf8 "-"\cf4 \
        
\f1\b \cf2 let
\f2\b0 \cf4  i = \cf10 isInterventionRequiredFlagSet\cf4  ? \cf8 "i"\cf4  : \cf8 "-"\cf4 \
        
\f1\b \cf2 let
\f2\b0 \cf4  C = \cf10 isConnectionOnTrafficFlagSet\cf4  ? \cf8 "C"\cf4  : \cf8 "-"\cf4 \
        
\f1\b \cf2 let
\f2\b0 \cf4  D = \cf10 isConnectionOnDemandFlagSet\cf4  ? \cf8 "D"\cf4  : \cf8 "-"\cf4 \
        
\f1\b \cf2 let
\f2\b0 \cf4  l = \cf10 isLocalAddressFlagSet\cf4  ? \cf8 "l"\cf4  : \cf8 "-"\cf4 \
        
\f1\b \cf2 let
\f2\b0 \cf4  d = \cf10 isDirectFlagSet\cf4  ? \cf8 "d"\cf4  : \cf8 "-"\cf4 \
\
        
\f1\b \cf2 return
\f2\b0 \cf4  \cf8 "\cf4 \\(W)\\(R)\cf8  \cf4 \\(c)\\(t)\\(i)\\(C)\\(D)\\(l)\\(d)\cf8 "\cf4 \
    \}\
\}\
\
\cf11 /**\cf4 \
 \cf13 `\cf14 ReachabilityWeakifier\cf13 `
\f3 \cf12  weakly wraps the 
\f2 \cf13 `\cf14 Reachability\cf13 `
\f3 \cf12  class
\f2 \cf4 \
 
\f3 \cf12 in order to break retain cycles when interacting with CoreFoundation.
\f2 \cf4 \
\
 
\f3 \cf12 CoreFoundation callbacks expect a pair of retain/release whenever an
\f2 \cf4 \
 
\f3 \cf12 opaque 
\f2 \cf13 `\cf14 info\cf13 `
\f3 \cf12  parameter is provided. These callbacks exist to guard
\f2 \cf4 \
 
\f3 \cf12 against memory management race conditions when invoking the callbacks.
\f2 \cf4 \
\
 \cf13 #### 
\f1\b \cf12 Race Condition
\f2\b0 \cf4 \
\
 
\f3 \cf12 If we passed 
\f2 \cf13 `\cf14 SCNetworkReachabilitySetCallback\cf13 `
\f3 \cf12  a direct reference to our
\f2 \cf4 \
 \cf13 `\cf14 Reachability\cf13 `
\f3 \cf12  class without also providing corresponding retain/release
\f2 \cf4 \
 
\f3 \cf12 callbacks, then a race condition can lead to crashes when:
\f2 \cf4 \
 \cf13 - `\cf14 Reachability\cf13 `
\f3 \cf12  is deallocated on thread X
\f2 \cf4 \
 \cf13 - 
\f3 \cf12 A 
\f2 \cf13 `\cf14 SCNetworkReachability\cf13 `
\f3 \cf12  callback(s) is already in flight on thread Y
\f2 \cf4 \
\
 \cf13 #### 
\f1\b \cf12 Retain Cycle
\f2\b0 \cf4 \
\
 
\f3 \cf12 If we pass 
\f2 \cf13 `\cf14 Reachability\cf13 `
\f3 \cf12  to CoreFoundtion while also providing retain/
\f2 \cf4 \
 
\f3 \cf12 release callbacks, we would create a retain cycle once CoreFoundation
\f2 \cf4 \
 
\f3 \cf12 retains our 
\f2 \cf13 `\cf14 Reachability\cf13 `
\f3 \cf12  class. This fixes the crashes and his how
\f2 \cf4 \
 
\f3 \cf12 CoreFoundation expects the API to be used, but doesn't play nicely with
\f2 \cf4 \
 
\f3 \cf12 Swift/ARC. This cycle would only be broken after manually calling
\f2 \cf4 \
 \cf13 `\cf14 stopNotifier()\cf13 `
\f3 \cf12  \'97 
\f2 \cf13 `\cf14 deinit\cf13 `
\f3 \cf12  would never be called.
\f2 \cf4 \
\
 \cf13 #### 
\f1\b \cf12 ReachabilityWeakifier
\f2\b0 \cf4 \
\
 
\f3 \cf12 By providing both retain/release callbacks and wrapping 
\f2 \cf13 `\cf14 Reachability\cf13 `
\f3 \cf12  in
\f2 \cf4 \
 
\f3 \cf12 a weak wrapper, we:
\f2 \cf4 \
 \cf13 - 
\f3 \cf12 interact correctly with CoreFoundation, thereby avoiding a crash.
\f2 \cf4 \
 
\f3 \cf12 See "Memory Management Programming Guide for Core Foundation".
\f2 \cf4 \
 \cf13 - 
\f3 \cf12 don't alter the public API of 
\f2 \cf13 `\cf14 Reachability.swift\cf13 `
\f3 \cf12  in any way
\f2 \cf4 \
 \cf13 - 
\f3 \cf12 still allow for automatic stopping of the notifier on 
\f2 \cf13 `\cf14 deinit\cf13 `
\f3 \cf12 .
\f2 \cf4 \
\cf11  */\cf4 \

\f1\b \cf2 private
\f2\b0 \cf4  
\f1\b \cf2 class
\f2\b0 \cf4  \cf5 ReachabilityWeakifier\cf4  \{\
    
\f1\b \cf2 weak
\f2\b0 \cf4  
\f1\b \cf2 var
\f2\b0 \cf4  \cf7 reachability\cf4 : \cf9 Reachability\cf4 ?\
    
\f1\b \cf2 init
\f2\b0 \cf4 (reachability: \cf9 Reachability\cf4 ) \{\
        
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 reachability\cf4  = reachability\
    \}\
\}\
\
\
\
\
\
ViewController.swift 
\f0 \cf0 \cb1 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\
Class ViewController : UIViewController \
\

\f1\b \cf2 \cb3 let
\f2\b0 \cf4  \cf7 reachability\cf4  = 
\f1\b \cf2 try
\f2\b0 \cf4 ! \cf9 Reachability\cf4 ()\
\
viewDidLoad() \'97> 
\f0 \cf0 \cb1 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f2 \cf4 \cb3 \
\
\cf6 NotificationCenter\cf4 .\cf15 default\cf4 .\cf15 addObserver\cf4 (
\f1\b \cf2 self
\f2\b0 \cf4 , selector: 
\f1\b \cf2 #selector
\f2\b0 \cf4 (\cf10 reachabilityChanged\cf4 (note:)), name: .\cf10 reachabilityChanged\cf4 , object: \cf10 reachability\cf4 )\
        \
        
\f1\b \cf2 do
\f2\b0 \cf4  \{\
                
\f1\b \cf2 try
\f2\b0 \cf4  
\f1\b \cf2 self
\f2\b0 \cf4 .\cf10 reachability\cf4 .\cf10 startNotifier\cf4 ()\
                        \cf15 print\cf4 (\cf8 "Notifier Started"\cf4 )\
                \} 
\f1\b \cf2 catch
\f2\b0 \cf4  \{\
                    \cf15 print\cf4 (\cf8 "Unable to start notifier"\cf4 )\
                \}\
\

\f0 \cf0 \cb1 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\

\f1\b \cf2 \cb3 @objc
\f2\b0 \cf4  
\f1\b \cf2 func
\f2\b0 \cf4  \cf7 reachabilityChanged\cf4 (note: \cf6 Notification\cf4 ) \{\
\
          
\f1\b \cf2 let
\f2\b0 \cf4  reachability = note.\cf15 object\cf4  
\f1\b \cf2 as
\f2\b0 \cf4 ! \cf9 Reachability\cf4 \
\
          
\f1\b \cf2 switch
\f2\b0 \cf4  reachability.\cf10 connection\cf4  \{\
          
\f1\b \cf2 case
\f2\b0 \cf4  .\cf10 wifi\cf4 :\
              \cf15 print\cf4 (\cf8 "Reachable via WiFi Connection"\cf4 )\
                \cf10 noConnectionVew\cf4 .\cf15 isHidden\cf4  = 
\f1\b \cf2 true
\f2\b0 \cf4 \
          
\f1\b \cf2 case
\f2\b0 \cf4  .\cf10 cellular\cf4 :\
              \cf15 print\cf4 (\cf8 "Reachable via Cellular Connection"\cf4 )\
          
\f1\b \cf2 case
\f2\b0 \cf4  .\cf10 unavailable\cf4 :\
            \cf15 print\cf4 (\cf8 "Network not reachable"\cf4 )\
            \cf10 noConnectionVew\cf4 .\cf15 isHidden\cf4  = 
\f1\b \cf2 false
\f2\b0 \cf4 \
          \}\
        \}\
    \
    
\f1\b \cf2 deinit
\f2\b0 \cf4 \{\
            \cf10 reachability\cf4 .\cf10 stopNotifier\cf4 ()\
        \}\
\
\
\

\f0 \cf0 \cb1 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f2 \cf4 \cb3 \
\
\
\
\
\
}